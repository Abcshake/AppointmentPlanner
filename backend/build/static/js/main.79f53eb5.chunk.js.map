{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","name","onChange","contacts","value","selected","Object","values","map","contact","AppointmentForm","props","title","setTitle","setContact","date","setDate","time","setTime","onSubmit","console","log","type","required","e","target","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","placeholder","Tile","tile","info","index","className","TileList","list","AppointmentsPage","useState","length","preventDefault","addAppointments","appointments","ContactForm","setName","phone","setPhone","email","setEmail","ContactsPage","duplicate","setDuplicate","useEffect","undefined","find","addContacts","App","setContacts","setAppointment","ROUTES","to","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"iMAEaA,EAAgB,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAE7C,OACE,yBAAQF,KAAMA,EAAMC,SAAUA,EAA9B,UACE,wBAAQE,MAAO,GAAaC,SAAS,WAArC,iCAAyB,GAGxBC,OAAOC,OAAOJ,GAAUK,KAAI,SAACC,GAC5B,OACE,wBAAQL,MAAOK,EAAf,SACGA,GAD0BA,UCR1BC,EAAkB,SAACC,GAAW,IAEzCR,EAUEQ,EAVFR,SACAS,EASED,EATFC,MACAC,EAQEF,EARFE,SACAJ,EAOEE,EAPFF,QACAK,EAMEH,EANFG,WACAC,EAKEJ,EALFI,KACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,QACAC,EACER,EADFQ,SA0BA,OAFAC,QAAQC,IAAIZ,EAAQR,MAGhB,uBAAMkB,SAAUA,EAAhB,UACE,0CACA,uBACCG,KAAK,OACLrB,KAAK,QACLG,MAAOQ,EACPW,UAAQ,EACRrB,SAzBmB,SAACsB,GACzBX,EAASW,EAAEC,OAAOrB,UA0Bd,yCACA,uBACCkB,KAAK,OACLrB,KAAK,OACLG,MAAOW,EACPW,IAvCc,WAAO,IAAD,GACA,IAAIC,MAC1BC,mBAAmB,SACnBC,MAAM,KAHgB,mBACpBC,EADoB,KACbC,EADa,KACRC,EADQ,KAIzB,MAAM,GAAN,OAAUA,EAAV,YAAkBF,EAAMG,SAAS,EAAG,KAApC,YAA4CF,EAAIE,SAAS,EAAG,MAmClDC,GACLhC,SA7BkB,SAACsB,GACxBR,EAAQQ,EAAEC,OAAOrB,QA6BZmB,UAAQ,IAET,yCACA,uBAAOD,KAAK,OACXrB,KAAK,OACLG,MAAOa,EACPf,SAhCkB,SAACsB,GACxBN,EAAQM,EAAEC,OAAOrB,QAgCZmB,UAAQ,IAET,cAAC,EAAD,CACAtB,KAAK,UACLE,SAhCGA,EAASK,KAAI,SAACC,GAAD,OAAaA,EAAQR,QAiCrCG,MAAQK,EACRP,SAAU,SAACsB,GAAD,OAAOV,EAAWU,EAAEC,OAAOrB,QACrC+B,YAAY,qBACZ,uBAAOb,KAAK,SAASlB,MAAM,eCtEtBgC,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAGfC,EAAOhC,OAAOC,OAAO8B,GAAM7B,KAAI,SAACJ,EAAOmC,GAC5C,IAAIC,EAMJ,OAJEA,EADY,IAAVD,EACQ,aAEA,OAEL,mBAAeC,UAAWA,EAA1B,SAAuCpC,GAA/BmC,MAMjB,OACE,qBAAKC,UAAU,iBAAf,SACGF,KClBQG,EAAW,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAExB,OADAtB,QAAQC,IAAIqB,GAEV,8BACGA,EAAKlC,KAAI,SAAC6B,EAAME,GAAP,OACT,cAAC,EAAD,CAAkBF,KAAMA,GAAbE,SCFLI,EAAmB,SAAChC,GAAU,MAKhBiC,mBAAS,IALO,mBAKnChC,EALmC,KAK5BC,EAL4B,OAMZ+B,mBAC7BjC,EAAMR,SAAS0C,OAAS,EAAIlC,EAAMR,SAAS,GAAGF,KAAO,IAPZ,mBAMnCQ,EANmC,KAM1BK,EAN0B,OASlB8B,mBAAS,IATS,mBASnC7B,EATmC,KAS7BC,EAT6B,OAUlB4B,mBAAS,IAVS,mBAUnC3B,EAVmC,KAU7BC,EAV6B,KA0BzC,OACE,gCACE,oCACE,iDACA,cAAC,EAAD,CACEf,SAAYQ,EAAMR,SAClBS,MAAOA,EACPC,SAAUA,EACVJ,QAASA,EACTK,WAAYA,EACZC,KAAMA,EACNC,QAASA,EACTC,KAAMA,EACNC,QAASA,EACTC,SA3Ba,SAACK,GACpBA,EAAEsB,iBAIFnC,EAAMoC,gBAAgBnC,EAAMH,EAAQM,EAAKE,GACzCJ,EAAS,IACTC,EAAW,IACXE,EAAQ,IACRE,EAAQ,UAqBN,uBACA,oCACE,8CACA,cAAC,EAAD,CAAUwB,KAAM/B,EAAMqC,sBC/CjBC,EAAc,SAACtC,GAAW,IAC9BV,EAMOU,EANPV,KACLiD,EAKYvC,EALZuC,QACAC,EAIYxC,EAJZwC,MACAC,EAGYzC,EAHZyC,SACAC,EAEY1C,EAFZ0C,MACAC,EACY3C,EADZ2C,SACAnC,EAAYR,EAAZQ,SAeF,OACE,8BACE,uBAAMA,SAAUA,EAAhB,UACE,yCACA,uBACCG,KAAK,OACLlB,MAAOH,EACPA,KAAK,OACLC,SArBoB,SAACsB,GACxB0B,EAAQ1B,EAAEC,OAAOrB,QAqBdmB,UAAQ,EACRY,YAAc,iBAGf,0CACA,uBACCb,KAAK,MACLlB,MAAO+C,EACPjD,SA1BqB,SAACsB,GACzB4B,EAAS5B,EAAEC,OAAOrB,QA0BfmB,UAAQ,EACRY,YAAc,yBAGf,0CACA,uBACCb,KAAK,QACLlB,MAAOiD,EACPnD,SA/BqB,SAACsB,GACzB8B,EAAS9B,EAAEC,OAAOrB,QA+BfmB,UAAQ,EACRY,YAAY,kBAGb,uBAAOb,KAAK,SAASlB,MAAM,iBCrDtBmD,EAAe,SAAC5C,GAAU,MAMdiC,mBAAS,IANK,mBAM/B3C,EAN+B,KAMzBiD,EANyB,OAOZN,mBAAS,IAPG,mBAO/BO,EAP+B,KAOxBC,EAPwB,OAQZR,mBAAS,IARG,mBAQ/BS,EAR+B,KAQxBC,EARwB,OASJV,oBAAS,GATL,mBAS/BY,EAT+B,KASpBC,EAToB,KAgDrC,OAnBDC,qBAAU,gBAGOC,IADAhD,EAAMR,SAASyD,MAAK,SAACnD,GAAD,OAAaA,EAAQR,OAASA,QAQ1C,EACtBwD,GAAa,GAEbA,GAAa,KAGd,CAACxD,EAAKuD,EAAU7C,EAAMR,WAIrB,gCACE,oCACE,6CAEGqD,EAAW,0BAA4B,MAE1C,cAAC,EAAD,CACEvD,KAAQA,EACRoD,MAASA,EACTF,MAASA,EACTD,QAAWA,EACXI,SAAYA,EACZF,SAAYA,EACZjC,SAlDa,SAACK,GACpBA,EAAEsB,iBAKCU,IACF7C,EAAMkD,YAAY5D,EAAKkD,EAAME,GAC7BH,EAAQ,IACRE,EAAS,IACTE,EAAS,WA0CR,uBACA,oCACE,0CACA,cAAC,EAAD,CACEZ,KAAM/B,EAAMR,kBCUP2D,MA5Ef,WAAe,MAKkBlB,mBAAS,IAL3B,mBAKPzC,EALO,KAKG4D,EALH,OAMyBnB,mBAAS,IANlC,mBAMPI,EANO,KAMOgB,EANP,OAOUpB,mBAAS,IAPnB,mBASNqB,GATM,UAUD,aADLA,EAES,gBA+BhB,OACE,qCACE,gCACE,cAAC,IAAD,CAASC,GAAID,EAAiBE,gBAAgB,SAA9C,sBAGA,cAAC,IAAD,CAASD,GAAID,EAAqBE,gBAAgB,SAAlD,6BAIF,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,IAAD,CAAUH,GAAID,MAEhB,cAAC,IAAD,CAAOI,KAAMJ,EAAb,SAEE,cAAC,EAAD,CACEJ,YAvCQ,SAAC5D,EAAKkD,EAAME,GAChCU,EAAY,GAAD,mBACN5D,GADM,CACI,CACXF,KAAMA,EACNkD,MAAOA,EACPE,MAAOA,OAmCClD,SAAUA,MAEd,cAAC,IAAD,CAAOkE,KAAMJ,EAAb,SAEE,cAAC,EAAD,CACElB,gBAnCY,SAACnC,EAAMH,EAAQM,EAAKE,GAC1C+C,EAAe,GAAD,mBACThB,GADS,CACK,CACfpC,MAAOA,EACPH,QAASA,EACTM,KAAMA,EACNE,KAAMA,OA8BA+B,aAAcA,EACd7C,SAAUA,eCpExBmE,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.79f53eb5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({name, onChange, contacts}) => {\r\n\r\n  return (\r\n    <select name={name} onChange={onChange}>\r\n      <option value={\"\"} key={-1} selected=\"selected\">\r\n        No Contact Selected\r\n      </option>\r\n      {Object.values(contacts).map((contact) => {\r\n        return (\r\n          <option value={contact} key={contact}>\r\n            {contact} \r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker} from \"../contactPicker/ContactPicker\"\r\n//potential entry point for post express route for appointments\r\nexport const AppointmentForm = (props) => {\r\nconst {\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  onSubmit\r\n} = props;\r\nconst getTodayString = () => {\r\n  const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const handleTitleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (e) => {\r\n    setDate(e.target.value);\r\n  };\r\n\r\n  const handleTimeChange = (e) => {\r\n    setTime(e.target.value);\r\n  };\r\n\r\n  const GetContactName = () => {\r\n    return contacts.map((contact) => contact.name);\r\n  };\r\n  console.log(contact.name);\r\n\r\n  return (\r\n      <form onSubmit={onSubmit}>\r\n        <label>Title</label>\r\n        <input\r\n         type=\"text\"\r\n         name=\"title\"\r\n         value={title}\r\n         required\r\n         onChange={handleTitleChange}>\r\n        </input>\r\n        <label>Date</label>\r\n        <input \r\n         type=\"date\"\r\n         name=\"date\"\r\n         value={date}\r\n         min={getTodayString()}\r\n         onChange={handleDateChange}\r\n         required>\r\n        </input>\r\n        <label>Time</label>\r\n        <input type=\"time\"\r\n         name=\"time\"\r\n         value={time}\r\n         onChange={handleTimeChange}\r\n         required>\r\n        </input>\r\n        <ContactPicker \r\n        name=\"contact\"\r\n        contacts={GetContactName()}\r\n        value ={contact}\r\n        onChange={(e) => setContact(e.target.value)}\r\n        placeholder=\"Appointment With\" />\r\n        <input type=\"submit\" value=\"submit\"></input>\r\n      </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({tile}) => {\r\n\r\n\r\n const info = Object.values(tile).map((value, index) => {\r\n  let className;\r\n  if (index === 0) {\r\n    className='tile-title';\r\n  } else {\r\n    className='tile'\r\n  }\r\n  return <p key={index} className={className} >{value}</p>\r\n  \r\n});\r\n \r\n\r\n\r\nreturn (\r\n  <div className=\"tile-container\">\r\n    {info}\r\n  </div>\r\n);\r\n};","import React from \"react\";\r\nimport {Tile} from './../tile/Tile.js';\r\nexport const TileList = ({list}) => {\r\n  console.log(list);\r\n  return (\r\n    <div>\r\n      {list.map((tile, index) => (\r\n       <Tile key={index} tile={tile} />\r\n      ))}\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport {AppointmentForm} from \"../../components/appointmentForm/AppointmentForm\";\r\nimport {TileList} from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n const [title, setTitle] = useState('');\r\n const [contact, setContact] = useState(\r\n  props.contacts.length > 0 ? props.contacts[0].name : \"\"\r\n );\r\n const [date, setDate] = useState('');\r\n const [time, setTime] = useState('');\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    props.addAppointments(title,contact,date,time);\r\n    setTitle(\"\");\r\n    setContact(\"\");\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          contacts = {props.contacts}\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          onSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList list={props.appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\n//potential entry point for post express route for contacts\r\n\r\nexport const ContactForm = (props) => {\r\n  const {name,\r\n    setName,\r\n    phone,\r\n    setPhone,\r\n    email,\r\n    setEmail,\r\n    onSubmit} = props;\r\n\r\n    const handleNameChange = (e) =>{\r\n      setName(e.target.value);\r\n    }\r\n\r\n    const handlePhoneChange = (e) =>{\r\n      setPhone(e.target.value);\r\n    }\r\n\r\n    const handleEmailChange = (e) =>{\r\n      setEmail(e.target.value);\r\n    }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <label>Name</label>\r\n        <input\r\n         type=\"text\"\r\n         value={name}\r\n         name=\"name\"\r\n         onChange={handleNameChange}\r\n         required\r\n         placeholder = \"Contact name\">\r\n        </input>\r\n\r\n        <label>Phone</label>\r\n        <input\r\n         type=\"tel\"\r\n         value={phone}\r\n         onChange={handlePhoneChange}\r\n         required\r\n         placeholder = \"Contact phone number\">\r\n        </input>\r\n\r\n        <label>Email</label>\r\n        <input\r\n         type=\"email\"\r\n         value={email}\r\n         onChange={handleEmailChange}\r\n         required\r\n         placeholder=\"Contact email\">\r\n         </input>\r\n\r\n        <input type=\"submit\" value=\"submit\"></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {ContactForm} from \"../../components/contactForm/ContactForm\";\r\nimport {TileList} from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n const [name, setName] = useState('');\r\n const [phone, setPhone] = useState('');\r\n const [email, setEmail] = useState('');\r\n const [duplicate, setDuplicate] = useState(false);\r\n \r\n \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if(!duplicate){\r\n     props.addContacts(name,phone,email);\r\n     setName('');\r\n     setPhone('');\r\n     setEmail('');\r\n   }\r\n  };\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n useEffect(() => {\r\n  const nameIsDuplicate = () => {\r\n    const found = props.contacts.find((contact) => contact.name === name);\r\n    if (found !== undefined) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  if (nameIsDuplicate()===true) {\r\n    setDuplicate(true);\r\n  } else {\r\n    setDuplicate(false);\r\n  }\r\n  \r\n}, [name,duplicate,props.contacts]);\r\n\r\n \r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>\r\n          Add Contact\r\n          {duplicate? \"- Name already exists -\" : \"\"}\r\n          </h2> \r\n        <ContactForm\r\n          name = {name}\r\n          email = {email}\r\n          phone = {phone}\r\n          setName = {setName}\r\n          setEmail = {setEmail}\r\n          setPhone = {setPhone}\r\n          onSubmit = {handleSubmit} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          list={props.contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n const [contacts, setContacts] = useState([]);\r\n const [appointments, setAppointment] = useState([]);\r\n const [data, setData] = useState([]);\r\n\r\n   const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  //potential place to add express get route for contacts and appointments\r\n\r\n  const addContacts = (name,phone,email) => { \r\n  setContacts([\r\n    ...contacts, {\r\n      name: name,\r\n      phone: phone,\r\n      email: email,\r\n    },\r\n  ]);\r\n};\r\n\r\n  const addAppointments = (title,contact,date,time) => {\r\n    setAppointment([\r\n      ...appointments, {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage\r\n              addContacts={addContacts}\r\n              contacts={contacts} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n              addAppointments={addAppointments}\r\n              appointments={appointments}\r\n              contacts={contacts} />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}